import xml.etree.ElementTree as ET
import argparse
import os.path

def graph_size(dir, gxl_file):
    num_nodes = 0
    graph = ET.parse(os.path.join(dir, gxl_file)).getroot()
    for node in graph.findall("graph/node"):
        num_nodes = num_nodes + 1
    #print("graph ", gxl_file, " has size ", num_nodes)
    return num_nodes

# Parse the command line arguments.
parser = argparse.ArgumentParser(description="Creates collection of graphs with given number of nodes from directory containing GXL files.")
parser.add_argument("dataset", help="path to existing dataset file")
parser.add_argument("collection", help="path to sample file to be generated by the script")
parser.add_argument("dir", help="path to directory containing GXL files")
parser.add_argument("min_size", help="minimal size", type=int)
parser.add_argument("max_size", help="maximal size", type=int)
args = parser.parse_args()
if args.dataset == args.collection:
    raise Exception("dataset file equals collection file")
if not os.path.isdir(args.dir):
        raise Exception("Invalid argument \"" + dir + "\": not a directory. Usage: python graphs_of_given_size.py <dataset> <collection> <dir> <min-num-nodes> <max-num-nodes>")

# Parse the dataset file.
dataset = ET.parse(args.dataset).getroot()
graphs = [(graph.attrib["file"], graph.attrib["class"]) for graph in dataset]

# Select graphs with size between min_size and max_size.
file = open(args.collection, "w")
file.write("<?xml version=\"1.0\"?>")
file.write("\n<!DOCTYPE GraphCollection SYSTEM \"http://www.inf.unibz.it/~blumenthal/dtd/GraphCollection.dtd\">")
file.write("\n<GraphCollection>")
for file_class in graphs:
    size = graph_size(args.dir, file_class[0])
    if (size >= args.min_size) and (size <= args.max_size):
        file.write("\n\t<graph file=\"" + file_class[0] + "\" class=\"" + file_class[1] + "\"/>")
file.write("\n</GraphCollection>")
file.close()